name: CI/CD Pipeline
on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Étape 1 : Checkout du code
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Configuration Java
      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # Étape 3 : Build Maven
      - name: Build with Maven
        run: |
          mvn clean compile
          mvn test
          mvn package

      # Étape 4 : Stocker l'artefact (optionnel)
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: application-jar
          path: target/*.jar

      # Étape 5 : Configuration SSH
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

      # Étape 6 : Déploiement sécurisé
      - name: Deploy Application
        run: |
          # Copie du fichier JAR
          scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              target/*.jar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/home/user/app/
          
          # Arrêt de l'application existante et démarrage de la nouvelle
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
              "pkill -f 'java -jar' || true && \
               nohup java -jar /home/user/app/*.jar > /home/user/app/log.txt 2>&1 &"

      # Étape 7 : Vérification du déploiement
      - name: Verify Deployment
        run: |
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
              ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} \
              "curl -s http://localhost:8080/health || exit 1"
        timeout-minutes: 2